@page "/searchledgers"
@inject ILedgerRepo LedgerRepo
@inject ICustomerRepo CustomerRepo
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Microsoft.JSInterop

<div class="container">
    <EditForm Model="@ledger" OnValidSubmit="@SearchDailyLedger">
        <div class="row">
            <div class="form-group mb-3 col-3">
                <label for="CustomerId" class="form-label">Customer:</label>
                <select id="CustomerId" @bind="@ledger.CustomerId" class="form-select shadow-none" required>
                    <option value="">Select</option>
                    @{
                        if (customers is not null)
                        {
                            foreach (var customer in customers)
                            {
                                <option value="@customer.CustomerId">@customer.Name</option>
                            }
                        }
                    }
                </select>
                <ValidationMessage For="@(() => ledger.CustomerId)" />
            </div>
            <div class="mb-3 col-3">
                <label for="NpLedgerFromDate" class="form-label">Date From (Nepali):</label>
                <InputText @bind-Value="ledger.NpLedgerFromDate" class="form-control shadow-none" id="NpLedgerFromDate" placeholder="Select Nepali Date" />
            </div>
            <div class="mb-3 col-3">
                <label for="NpLedgerToDate" class="form-label">Date To (Nepali):</label>
                <InputText @bind-Value="ledger.NpLedgerToDate" class="form-control shadow-none" id="NpLedgerToDate" placeholder="Select Nepali Date" />
            </div>
            <div class="col-3 mt-4">
                <button type="submit" class="btn btn-primary shadow-none">Submit</button>
                <a href="dailytransaction/list" class="btn btn-secondary shadow-none">Back to List</a>
            </div>
        </div>
    </EditForm>
</div>


@if (ledgers == null)
{
    <p><em> </em></p>
}
else if (ledgers.Any())
{
    decimal? balance = 0;
    <Card>
        <CardHeader>
            Ledger @if (customer != null)
            {
                @customer.Name
            }
        </CardHeader>
        <CardBody>


            <div class="row">
                <div class="col-md-12">
                    <h6>Ledgers</h6>
                    <table class="table table-bordered">
                        <thead>

                            <tr>
                                <th>Date</th>
                                <th>Particular</th>
                                <th>Debit/Credit</th>
                                <th class="text-end">Debit Amount</th>
                                <th class="text-end">Credit Amount</th>
                                <th class="text-end">Balance</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ledger in ledgers)
                            {
                                balance = balance + ledger.DebitAmount - ledger.CreditAmount;
                                <tr>
                                    <td>@ledger.NpTransactionDate</td>
                                    <td>@ledger.Particulars</td>
                                    <td>@ledger.DebitCredit</td>
                                    <td class="text-end">@ledger.DebitAmount</td>
                                    <td class="text-end">@ledger.CreditAmount</td>
                                    <td class="text-end">@balance</td>
                                </tr>

                            }

                        </tbody>
                        <tfoot>

                        </tfoot>
                    </table>
                </div>
            </div>

        </CardBody>
    </Card>
}
else
{
    <p>No daily transactions found</p>
}

<script>
function initializeNepaliCalendars(fromElementId, toElementId) {
    var fromElement = document.getElementById(fromElementId);
    var toElement = document.getElementById(toElementId);

    if (fromElement) {
        fromElement.nepaliDatePicker({
            onChange: function() {
                var bsDate = fromElement.value;
                DotNet.invokeMethodAsync('Accounting', 'UpdateLedgerSearchFromDate', bsDate).catch(err => console.error(err));
            }
        });
    }

    if (toElement) {
        toElement.nepaliDatePicker({
            onChange: function() {
                var bsDate = toElement.value;
                DotNet.invokeMethodAsync('Accounting', 'UpdateLedgerSearchToDate', bsDate).catch(err => console.error(err));
            }
        });
    }
}
</script>

@code {
    private static LedgerSearchVM ledger = new();
    private List<LedgerVM> ledgers = null;
    public List<Customer> customers { get; set; }
    public Customer customer { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeNepaliCalendars", "NpLedgerFromDate", "NpLedgerToDate");
        }
    }
    protected override async Task OnInitializedAsync()
    {


        await LoadCustomers();

    }
    private async Task LoadCustomers()
    {
        var clients = await CustomerRepo.GetAllAsync();
        customers = clients.ToList();
    }
    private async Task SearchDailyLedger()
    {
        try
        {
            customer = await CustomerRepo.GetByIdAsync(ledger.CustomerId);
            var transactions = await LedgerRepo.GetLedgersByDateAsync(ledger.CustomerId,ledger.NpLedgerFromDate, ledger.NpLedgerToDate);
            ledgers = transactions.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching daily transactions: {ex.Message}");
        }
    }

    [JSInvokable]
    public static void UpdateLedgerSearchFromDate(string fromDate)
    {
        ledger.NpLedgerFromDate = fromDate;
    }

    [JSInvokable]
    public static void UpdateLedgerSearchToDate(string toDate)
    {
        ledger.NpLedgerToDate = toDate;
    }
}
