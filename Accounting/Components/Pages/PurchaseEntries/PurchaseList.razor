@page "/purchaseentries"
@inject IPurchaseEntryRepo PurchaseEntryRepo
@inject ICustomerRepo CustomerRepo
@inject IPurchaseItemRepo PurchaseItemRepo
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<PageTitle>@Localizer["PurchaseEntries"]</PageTitle>
<Card>
    <CardHeader>
        @Localizer["PurchaseEntries"] <a href="/purchase/create" class="btn btn-primary shadow-none  float-end">
            @Localizer["Purchase"]
        </a>
    </CardHeader>
    <CardBody>
        <ConfirmDialog @ref="dialog" />
        @if (purchases == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (purchases.Any())
        {
            <Grid TItem="PurchaseEntry" class="table table-hover table-bordered table-striped" DataProvider="PurchaseDataProvider" AllowFiltering="false" AllowPaging="true" Responsive="true" AllowSorting="true">
                <GridColumn TItem="PurchaseEntry" HeaderText="BillID" PropertyName="BillID">
                    @context.BillID
                </GridColumn>
                <GridColumn TItem="PurchaseEntry" HeaderText="@Localizer["BillNumber"]" PropertyName="BillNumber">
                    @context.BillNumber
                </GridColumn>
                <GridColumn TItem="PurchaseEntry" HeaderText="@Localizer["VendorName"]" PropertyName="VendorName">
                    @context.VendorName
                </GridColumn>
                <GridColumn TItem="PurchaseEntry" HeaderText="@Localizer["BillDate"]" PropertyName="BillDate">
                    @context.BillDate.ToShortDateString()
                </GridColumn>
                <GridColumn TItem="PurchaseEntry" HeaderText="@Localizer["PurchaseOrderNumber"]" PropertyName="PurchaseOrderNumber">
                    @context.PurchaseOrderNumber
                </GridColumn>
                <GridColumn TItem="PurchaseEntry" HeaderText="@Localizer["TotalAmount"]" PropertyName="TotalAmount">
                    @context.TotalAmount
                </GridColumn>
                <GridColumn TItem="PurchaseEntry" HeaderText="@Localizer["PaymentStatus"]" PropertyName="PaymentStatus">
                    @context.PaymentStatus
                </GridColumn>
               
                <GridColumn TItem="PurchaseEntry" HeaderText="@Localizer["Action"]" Context="expenseContext">
                    <div class="btn-group">
                        <Button onclick="@(() => OpenEditForm(expenseContext.BillID))" Size="Size.Small" Color="ButtonColor.Primary">Edit</Button>
                        <EditForm EditContext="editContext" OnValidSubmit="@(() => DeletePurchase(expenseContext.BillID))">
                            @if (expenseContext != null)
                            {
                                <Button Color="ButtonColor.Danger" Size="Size.Small" Type="ButtonType.Submit">Delete</Button>
                            }
                        </EditForm>
                    </div>
                </GridColumn>
            </Grid>
        }
        else
        {
            <p>No expenses found</p>
        }
    </CardBody>
</Card>

@code {
    private List<PurchaseEntry>? purchases = null;
    private PurchaseEntry purchase;
    private EditContext? editContext;

    [Inject] protected ToastService ToastService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            purchases ??= (await PurchaseEntryRepo.GetAllAsync()).ToList();
  
            editContext = new EditContext(purchases);
        }
        catch (Exception ex)
        {
       
            Console.WriteLine($"Error fetching expenses: {ex.Message}");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task<GridDataProviderResult<PurchaseEntry>> PurchaseDataProvider(GridDataProviderRequest<PurchaseEntry> request)
    {
        return await Task.FromResult(request.ApplyTo(purchases));
    }

    private async void DeletePurchase(int expenseId)
    {
        try
        {
            var confirmation = await dialog.ShowAsync(
                title: "Are you sure you want to delete this?",
                message1: "This will delete the record. Once deleted can not be rolled back.",
                message2: "Do you want to proceed?");

            if (confirmation)
            {
                if (expenseId > 0)
                {
                    PreloadService.Show();
                    await PurchaseEntryRepo.DeleteAsync(expenseId);
                    ToastService.Notify(new(ToastType.Success, $"Expense deleted successfully."));

                    purchases ??= (await PurchaseEntryRepo.GetAllAsync()).ToList();

                    await Task.Delay(2000);
                    NavigationManager.NavigateTo("/purchases");
                }
            }
            else
            {
                // do something
            }
        }
        catch (Exception ex)
        {
        
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private void OpenEditForm(int expenseId)
    {
        NavigationManager.NavigateTo($"/purchase/edit/{expenseId}");
    }

    private async Task<string> GetCustomerNameByIdAsync(int customerId)
    {
        try
        {
            var customer = await CustomerRepo.GetByIdAsync(customerId);
            return customer != null ? customer.Name : "Unknown";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customer name: {ex.Message}");
            return "Unknown";
        }
    }
}
