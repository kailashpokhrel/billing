@page "/settings"
@inject ISettingRepo SettingRepo
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<PageTitle>@Localizer["SettingList"]</PageTitle>
<Card>
    <CardHeader>
        @Localizer["SettingList"] <a href="/setting/create" class="btn btn-primary shadow-none float-end">
            @Localizer["AddNew"]
        </a>
    </CardHeader>
    <CardBody>

        <ConfirmDialog @ref="dialog" />
        @if (settings == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (settings.Any())
        {
            <Grid TItem="Setting" class="table table-hover table-bordered table-striped" DataProvider="SettingsDataProvider" AllowFiltering="false" AllowPaging="true" Responsive="true" AllowSorting="true">
                <GridColumn TItem="Setting" HeaderText="Setting ID" PropertyName="Id">
                    @context.Id
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="@Localizer["Name"]" PropertyName="Name">
                    @context.Name
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="@Localizer["Value"]" PropertyName="Value">
                    @context.Value
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="@Localizer["Type"]" PropertyName="Type">
                    @context.Type
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="@Localizer["Is Active"]" PropertyName="IsActive">
                    @(context.IsActive)
                </GridColumn>
                <GridColumn TItem="Setting" HeaderText="@Localizer["Actions"]" Context="settingContext">
                    <div class="btn-group">
                        <Button onclick="@(() => OpenEditForm(settingContext.Id))" Size="Size.Small" Color="ButtonColor.Primary">@Localizer["Edit"]</Button>

                        <EditForm EditContext="editContext" OnValidSubmit="@(() => DeleteSetting(settingContext.Id))">
                            @if (settingContext != null)
                            {
                                <Button Color="ButtonColor.Danger" Size="Size.Small" Type="ButtonType.Submit">@Localizer["Delete"]</Button>
                            }
                        </EditForm>
                    </div>
                </GridColumn>
            </Grid>
        }
        else
        {
            <p>@Localizer["No settings found"]</p>
        }

    </CardBody>
</Card>

@code {
    private List<Setting>? settings = null;
    private Setting setting;
    private EditContext? editContext;

    [Inject] protected ToastService ToastService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            settings ??= (await SettingRepo.GetAllSettingAsync()).ToList();
            setting ??= new Setting();
            editContext = new EditContext(setting);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching settings: {ex.Message}");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task<GridDataProviderResult<Setting>> SettingsDataProvider(GridDataProviderRequest<Setting> request)
    {
        return await Task.FromResult(request.ApplyTo(settings));
    }

    private async void DeleteSetting(int settingId)
    {
        try
        {
            var confirmation = await dialog.ShowAsync(
                title: Localizer["Are you sure you want to delete this?"],
                message1: Localizer["This will delete the record. Once deleted can not be rolled back."],
                message2: Localizer["Do you want to proceed?"]);

            if (confirmation)
            {
                if (settingId > 0)
                {
                    PreloadService.Show();
                    await SettingRepo.DeleteSettingAsync(settingId);
                    ToastService.Notify(new(ToastType.Success, Localizer["Setting deleted successfully."]));

                    settings ??= (await SettingRepo.GetAllSettingAsync()).ToList();

                    await Task.Delay(2000);
                    NavigationManager.NavigateTo("/settings");
                }
            }
            else
            {
                // do something
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private void OpenEditForm(int settingId)
    {
        NavigationManager.NavigateTo($"/setting/edit/{settingId}");
    }
}
