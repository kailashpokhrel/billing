@page "/dailytransactions"
@inject IDailyTransactionRepo DailyTransactionRepo
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@inject IJSRuntime JS

<PageTitle>DailyTransaction List</PageTitle>
<Card>
    <CardHeader>
        <div class="container">
            <EditForm Model="@dailyTransaction" OnValidSubmit="@SearchDailyTransaction">
                <div class="row">
                    <div class="mb-3 col-4">
                        <label for="NpTransactionFromDate" class="form-label">@Localizer["FromDateNepali"]:</label>
                        <InputText @bind-Value="dailyTransaction.NpTransactionFromDate" class="form-control shadow-none" id="NpTransactionFromDate" placeholder="Select Nepali Date" />
                    </div>
                    <div class="mb-3 col-4">
                        <label for="NpTransactionToDate" class="form-label">@Localizer["ToDateNepali"]:</label>
                        <InputText @bind-Value="dailyTransaction.NpTransactionToDate" class="form-control shadow-none" id="NpTransactionToDate" placeholder="Select Nepali Date" />
                    </div>
                    <div class="col-2 mt-4">
                        <button type="submit" class="btn btn-primary shadow-none">Search</button>
                    </div>
                    <div class="col-2 mt-4">
                        <a href="/dailytransaction/create" class="btn btn-primary shadow-none float-end">
                            @Localizer["AddNew"]
                        </a>
                    </div>
                </div>
            </EditForm>
        </div>
    </CardHeader>
    <CardBody>
        <ConfirmDialog @ref="dialog" />
        @if (dailytransactions == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (dailytransactions.Any())
        {
            <div class="row">
                <div class="col-md-12">
                    <h6>Transactions</h6>
                    <table class="table table-bordered">
                        <thead>

                            <tr>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Particular</th>
                                <th>Bank</th>
                                <th>Payment</th>
                                <th class="text-end">Amount</th>
                                <th>Action</th>

                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in dailytransactions)
                            {

                                <tr>
                                    <td>@transaction.NpTransactionDate</td>
                                    <td>@transaction.InOut</td>
                                    <td>@transaction.Particular</td>
                                    <td>@transaction.BankName</td>
                                    <td>@transaction.PaymentMode</td>
                                    <td>@transaction.Amount</td>
                                    <td>
                                        <Button onclick="@(() => OpenEditForm(transaction.Id))" Size="Size.Small" Color="ButtonColor.Primary">Edit</Button>

                                        <EditForm Model="transaction" OnValidSubmit="@(() => DeleteDailyTransaction(transaction.Id,transaction.NpTransactionDate))">
                                           
                                                <Button Color="ButtonColor.Danger" Size="Size.Small" Type="ButtonType.Submit">Delete</Button>
                                            
                                        </EditForm>
                                    </td>
                                </tr>


                            }
                        </tbody>

                    </table>
                </div>
            </div>

        }
        else
        {
            <p>No daily transactions found</p>
        }
    </CardBody>
</Card>

<script>
function initializeNepaliCalendars(fromElementId, toElementId) {
    var fromElement = document.getElementById(fromElementId);
    var toElement = document.getElementById(toElementId);

    if (fromElement) {
        fromElement.nepaliDatePicker({
            onChange: function() {
                var bsDate = fromElement.value;
                DotNet.invokeMethodAsync('Accounting', 'UpdateTransactionListFromDate', bsDate).catch(err => console.error(err));
            }
        });
    }

    if (toElement) {
        toElement.nepaliDatePicker({
            onChange: function() {
                var bsDate = toElement.value;
                DotNet.invokeMethodAsync('Accounting', 'UpdateTransactionListToDate', bsDate).catch(err => console.error(err));
            }
        });
    }
}
</script>

@code {
    private List<DailyTransactionVM>? dailytransactions = null;
    private static DailyTransactionSearchVM dailyTransaction = new();
    private ConfirmDialog dialog = default!;
    [Inject] protected ToastService ToastService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeNepaliCalendars", "NpTransactionFromDate", "NpTransactionToDate");
        }
    }

    private async Task SearchDailyTransaction()
    {
        try
        {
            var transactions = await DailyTransactionRepo.GetDailyTransactionsByDateAsync(dailyTransaction.NpTransactionFromDate, dailyTransaction.NpTransactionToDate);
            dailytransactions = transactions.ToList();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching daily transactions: {ex.Message}");
        }
    }

    private async Task<GridDataProviderResult<DailyTransactionVM>> DailyTransactionsDataProvider(GridDataProviderRequest<DailyTransactionVM> request)
    {


        return await Task.FromResult(request.ApplyTo(dailytransactions));
    }

    private void OpenEditForm(int dailytransactionId)
    {
        NavigationManager.NavigateTo($"/dailytransaction/edit/{dailytransactionId}");
    }

    private async void DeleteDailyTransaction(int dailytransactionId,string npTransactionDate)
    {
        try
        {
            var confirmation = await dialog.ShowAsync(
                title: "Are you sure you want to delete this?",
                message1: "This will delete the record. Once deleted can not be rolled back.",
                message2: "Do you want to proceed?");

            if (confirmation)
            {
                if (dailytransactionId > 0)
                {
                    PreloadService.Show();
                    await DailyTransactionRepo.DeleteDailyTransactionAsync(dailytransactionId);
                    ToastService.Notify(new(ToastType.Success, $"DailyTransaction deleted successfully."));

                    dailytransactions ??= (await DailyTransactionRepo.GetAllDailyTransactionsAsync()).ToList();

                    await Task.Delay(2000);
                    NavigationManager.NavigateTo($"/dailytransactions/{npTransactionDate}");
                }
            }
            else
            {
                // do something
            }
        }
        catch (Exception ex)
        {
            // handle exception
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    [JSInvokable]
    public static void UpdateTransactionListFromDate(string fromDate)
    {
        dailyTransaction.NpTransactionFromDate = fromDate;
    }

    [JSInvokable]
    public static void UpdateTransactionListToDate(string toDate)
    {
        dailyTransaction.NpTransactionToDate = toDate;
    }
}
