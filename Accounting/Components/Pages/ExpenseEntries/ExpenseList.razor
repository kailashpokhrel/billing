@page "/expressentries"
@inject IExpenseEntryRepo ExpenseEntryRepo
@inject ICustomerRepo CustomerRepo
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<PageTitle>@Localizer["ExpenseList"]</PageTitle>
<Card>
    <CardHeader>
        @Localizer["ExpenseList"] <a href="/expense/create" class="btn btn-primary shadow-none  float-end">
            @Localizer["AddNew"]
        </a>
    </CardHeader>
    <CardBody>
        <ConfirmDialog @ref="dialog" />
        @if (expenses == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (expenses.Any())
        {
            <Grid TItem="ExpenseEntryVM" class="table table-hover table-bordered table-striped" DataProvider="ExpensesDataProvider" AllowFiltering="false" AllowPaging="true" Responsive="true" AllowSorting="true">
                <GridColumn TItem="ExpenseEntryVM" HeaderText="ExpenseID" PropertyName="ExpenseID">
                    @context.ExpenseID
                </GridColumn>
                <GridColumn TItem="ExpenseEntryVM" HeaderText="@Localizer["CustomerName"]" PropertyName="CustomerName">
                    @context.CustomerName
                </GridColumn>
                <GridColumn TItem="ExpenseEntryVM" HeaderText="@Localizer["ExpenseDate"]" PropertyName="ExpenseDate">
                    @context.ExpenseDate.ToShortDateString()
                </GridColumn>
                <GridColumn TItem="ExpenseEntryVM" HeaderText="@Localizer["ExpenseCategory"]" PropertyName="ExpenseCategory">
                    @context.ExpenseCategory
                </GridColumn>
                <GridColumn TItem="ExpenseEntryVM" HeaderText="@Localizer["Amount"]" PropertyName="Amount">
                    @context.Amount
                </GridColumn>
                <GridColumn TItem="ExpenseEntryVM" HeaderText="@Localizer["PaymentMethod"]" PropertyName="PaymentMethod">
                    @context.PaymentMethod
                </GridColumn>
                <GridColumn TItem="ExpenseEntryVM" HeaderText="@Localizer["Action"]" Context="expenseContext">
                    <div class="btn-group">
                        <Button onclick="@(() => OpenEditForm(expenseContext.ExpenseID))" Size="Size.Small" Color="ButtonColor.Primary">Edit</Button>
                        <EditForm EditContext="editContext" OnValidSubmit="@(() => DeleteExpense(expenseContext.ExpenseID))">
                            @if (expenseContext != null)
                            {
                                <Button Color="ButtonColor.Danger" Size="Size.Small" Type="ButtonType.Submit">Delete</Button>
                            }
                        </EditForm>
                    </div>
                </GridColumn>
            </Grid>
        }
        else
        {
            <p>No expenses found</p>
        }
    </CardBody>
</Card>

@code {
    private List<ExpenseEntryVM>? expenses = null;
    private ExpenseEntryVM expense;
    private EditContext? editContext;

    [Inject] protected ToastService ToastService { get; set; }
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    private ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            expenses ??= (await ExpenseEntryRepo.GetExpensesAsync()).ToList();

            foreach (var expenseEntry in expenses)
            {
                var customer = await CustomerRepo.GetByIdAsync(expenseEntry.CustomerID);
                if (customer != null)
                {
                    expenseEntry.CustomerName = customer.Name;
                }
                else
                {
                    expenseEntry.CustomerName = "Unknown";
                }
            }
            editContext = new EditContext(expenses);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching expenses: {ex.Message}");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task<GridDataProviderResult<ExpenseEntryVM>> ExpensesDataProvider(GridDataProviderRequest<ExpenseEntryVM> request)
    {
        return await Task.FromResult(request.ApplyTo(expenses));
    }

    private async void DeleteExpense(int expenseId)
    {
        try
        {
            var confirmation = await dialog.ShowAsync(
                title: "Are you sure you want to delete this?",
                message1: "This will delete the record. Once deleted can not be rolled back.",
                message2: "Do you want to proceed?");

            if (confirmation)
            {
                if (expenseId > 0)
                {
                    PreloadService.Show();
                    await ExpenseEntryRepo.DeleteExpenseAsync(expenseId);
                    ToastService.Notify(new(ToastType.Success, $"Expense deleted successfully."));

                    expenses ??= (await ExpenseEntryRepo.GetExpensesAsync()).ToList();

                    await Task.Delay(2000);
                    NavigationManager.NavigateTo("/expenses");
                }
            }
            else
            {
                // do something
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new (ToastType.Danger, $"Error: {ex.Message}."));
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private void OpenEditForm(int expenseId)
    {
        NavigationManager.NavigateTo($"/expense/edit/{expenseId}");
    }

    private async Task<string> GetCustomerNameByIdAsync(int customerId)
    {
        try
        {
            var customer = await CustomerRepo.GetByIdAsync(customerId);
            return customer != null ? customer.Name : "Unknown";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customer name: {ex.Message}");
            return "Unknown";
        }
    }
}
